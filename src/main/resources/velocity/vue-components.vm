<script type="text/x-template" id="photo-component">
    <div class="photo-component">
        <div v-if="showUploadForm" id="dropzone">
            <form id="upload-form">
                <input v-show="photopreview == null" @change="previewPhoto" id="photoinput" name="photo" type="file" accept="image/*">
            </form>
            <div class="flexy">
                <div v-if="photopreview != null" id="preview">
                    <img :src="photopreview">
                </div>
                <div v-if="photopreview != null" id="controls">
                    <button class="button" @click="clearUploadForm">Cancel</button>
                    <button class="button primary" @click="uploadPhoto">Upload</button>
                </div>
                <div v-else>Drag or click to choose photo</div>
            </div>
        </div>
        <h1 v-if="forUser">My photos</h1>
        <h1 v-else>Latest photos</h1>
        <div class="photos">
            <div v-if="photos.length === 0 && forUser">Hmm... There's nothing here. You should upload something.</div>
            <div v-for="photo in photos" class="photo">
                <img @click="lightboxPhoto(photo.id)" :src="'/static/p/' + photo.id">
                <div class="meta">
                    <div>{{formatDate(photo.created)}}</div>
                    <div>{{photo.likes}} {{photo.likes === 1 ? "like" : "likes"}}</div>
                    <div v-if="photo.liked" class="like liked" @click="unlikePhoto(photo.id)">❤</div>
                    <div v-else class="like" @click="likePhoto(photo.id)">❤</div>
                </div>
            </div>
        </div>
    </div>
</script>

<script>
    Vue.component('photo-component', {
        template: '#photo-component',
        props: ["showUploadForm", "forUser"],
        data: function () {
            return {
                signedInUser: Cookies.get("signed-in-user"),
                photos: [],
                photopreview: null,
            }
        },
        methods: {
            formatDate: function (timeInMillis) {
                return moment(timeInMillis).format("Do of MMMM, YYYY");
            },
            lightboxPhoto(photoId) {
                basicLightbox.create(`<img src="/static/p/${photoId}">`).show()
            },
            likePhoto: function (photoId) {
                axios.post("/api/likes?photo-id=" + photoId).then(response => {
                    this.getUserPhotos();
                });
            },
            unlikePhoto: function (photoId) {
                axios.delete("/api/likes?photo-id=" + photoId).then(response => {
                    this.getUserPhotos();
                });
            },
            previewPhoto: function () {
                if (document.querySelector("#photoinput").files[0]) {
                    var reader = new FileReader();
                    reader.onload = e => this.photopreview = e.target.result;
                    reader.readAsDataURL(document.querySelector("#photoinput").files[0]);
                }
            },
            clearUploadForm: function () {
                document.querySelector("#photoinput").value = "";
                this.photopreview = null;
            },
            uploadPhoto: function () {
                const data = new FormData(document.getElementById("upload-form"));
                const config = {headers: {"Content-Type": "multipart/form-data"}};
                axios.post("/api/photos", data, config).then(response => {
                    this.clearUploadForm();
                    this.getUserPhotos();
                }).catch(error => {
                    vex.dialog.alert(error.response.data);
                });
            },
            getUserPhotos: function () {
                let qp = this.forUser ? "?owner-id=" + Cookies.get("signed-in-user") : ""
                axios.get("/api/photos" + qp).then(response => {
                    this.photos = response.data;
                });
            }
        },
        created: function () {
            this.getUserPhotos();
        }
    })
</script>
